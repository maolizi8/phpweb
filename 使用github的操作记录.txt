=================================
github教程：
=================================
》》
》1.安装
》2.配置：
    （1）本地创建SSH key：
ssh-keygen -t rsa -C "your_email@youremail.com"
 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。

回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。
    （2）为了验证是否成功，在git bash下输入：
$ ssh -T git@github.com

》2.配置账户
  $ git config --global user.name "Your Name"
  $ git config --global user.email "email@example.com"
》3.创建版本库
  a.选择一个目录
  b.初始化一个git可管理的仓库
    $ git init
    Initialized empty Git repository in D:/www/.git/
》4.进入要上传的仓库，右键git bash，添加远程地址（连接远程服务器）：
  $ git remote add origin git@github.com:yourName/yourRepo.git
》5.检出仓库：
  $ git clone https://github.com/maolizi8/phpweb.git
》6.工作流
  （1）提出 更改（添加到暂存区）
    git add <filename>
    或 git add *
  （2）使用如下命令以实际提交改动：
    git commit -m "代码提交信息"
》7.推送改动
  （1）你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：
    git push origin master
    （可以把 master 换成你想要推送的任何分支。） 
》8.分支
 创建一个叫做"feature_x"的分支，并切换过去：
git checkout -b feature_x
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch>
更新与合并

要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，你可以使用如下命令预览差异：
git diff <source_branch> <target_branch>
标签

为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：
git log
你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。
替换本地改动

假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。

假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：
git fetch origin
git reset --hard origin/master
实用小贴士

内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，每个提交的信息只显示一行：
git config format.pretty oneline
交互式添加文件到暂存区：
git add -i 
